#!/usr/bin/env node

/**
 * Twitter Data Fetcher - Wrapper for MCP Playwright Twitter tools
 * Organizes reports in date-based folders: report/twitter/DD-MMM-YYYY/
 * 
 * Usage:
 *   node fetch-twitter-data.js "<keyword>" [maxPosts] [sortBy]
 *   
 * Example:
 *   node fetch-twitter-data.js "buildpad.io OR buildpad" 20 latest
 *   node fetch-twitter-data.js "#AI #Innovation" 50 top
 *   node fetch-twitter-data.js "@elonmusk" 10 latest
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * Configuration
 */
const CONFIG = {
  defaultMaxPosts: 20,
  defaultSortBy: 'latest', // 'latest', 'top', or 'people'
  reportFormats: ['markdown', 'csv', 'json']
};

/**
 * Get date-based folder path
 */
function getDateFolder() {
  const date = new Date();
  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                     'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  const dateStr = `${date.getDate()}-${monthNames[date.getMonth()]}-${date.getFullYear()}`;
  return path.join(__dirname, '..', '..', 'report', 'twitter', dateStr);
}

/**
 * Clean keyword for filename
 */
function sanitizeFilename(keyword) {
  return keyword
    .replace(/[^a-zA-Z0-9\s]/g, '_')
    .replace(/\s+/g, '_')
    .substring(0, 50)
    .toLowerCase();
}

/**
 * Move generated reports to date-based folder
 */
async function organizeReports(keyword) {
  const outputDir = getDateFolder();
  await fs.mkdir(outputDir, { recursive: true });
  
  const reportDir = path.join(__dirname, '..', '..', 'report');
  const safeKeyword = sanitizeFilename(keyword);
  const timestamp = new Date().toISOString().substring(0, 10);
  
  // Look for files generated by MCP tool
  const files = await fs.readdir(reportDir);
  const twitterFiles = files.filter(f => 
    f.includes('twitter') && 
    (f.includes(safeKeyword) || f.includes(keyword.replace(/\s/g, '_')))
  );
  
  console.log(`\nüìÅ Moving reports to: ${outputDir}`);
  
  for (const file of twitterFiles) {
    const oldPath = path.join(reportDir, file);
    const newPath = path.join(outputDir, file);
    
    try {
      await fs.rename(oldPath, newPath);
      console.log(`   ‚úÖ Moved: ${file}`);
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Could not move ${file}: ${error.message}`);
    }
  }
  
  return outputDir;
}

/**
 * Generate enhanced summary report
 */
async function generateSummary(outputDir, keyword, stats) {
  const summaryPath = path.join(outputDir, 'extraction-summary.md');
  const now = new Date();
  
  const summaryContent = `# Twitter Extraction Summary

## Extraction Details
- **Date:** ${now.toLocaleDateString()}
- **Time:** ${now.toLocaleTimeString()}
- **Keyword:** ${keyword}
- **Posts Fetched:** ${stats.totalPosts || 0}

## Engagement Metrics
- **Total Likes:** ${stats.totalLikes || 0}
- **Total Retweets:** ${stats.totalRetweets || 0}
- **Total Impressions:** ${stats.totalImpressions || 0}
- **Average Engagement:** ${stats.avgEngagement || '0.00'}%

## Top Performing Posts
${stats.topPosts || 'No posts found'}

## Files Generated
- Markdown Report: ${keyword}-report.md
- CSV Data: ${keyword}-data.csv
- JSON Data: ${keyword}-data.json

---
*Generated at ${now.toISOString()}*
`;

  await fs.writeFile(summaryPath, summaryContent);
  console.log(`\nüìù Summary saved: ${summaryPath}`);
}

/**
 * Main function to fetch Twitter data
 */
async function fetchTwitterData(keyword, maxPosts = CONFIG.defaultMaxPosts, sortBy = CONFIG.defaultSortBy) {
  console.log('\nüê¶ Twitter Data Fetcher');
  console.log('=' .repeat(60));
  console.log(`üìå Search Keyword: "${keyword}"`);
  console.log(`üìä Max Posts: ${maxPosts}`);
  console.log(`üîÑ Sort By: ${sortBy}`);
  console.log('=' .repeat(60));
  
  try {
    // Create output directory first
    const outputDir = getDateFolder();
    await fs.mkdir(outputDir, { recursive: true });
    console.log(`\nüìÅ Output directory prepared: ${outputDir}`);
    
    // Note about MCP tool usage
    console.log('\n‚ö†Ô∏è  IMPORTANT: This script prepares the folder structure.');
    console.log('   To fetch actual Twitter data, use the MCP Playwright tool:');
    console.log('\n   mcp__playwright__twitter_fetch_and_report');
    console.log(`   - keyword: "${keyword}"`);
    console.log(`   - maxPosts: ${maxPosts}`);
    console.log(`   - sortBy: ${sortBy}`);
    console.log(`   - format: both`);
    
    // After MCP tool runs, organize the reports
    console.log('\nüìå After running the MCP tool, the reports will be organized');
    console.log(`   into: ${outputDir}`);
    
    // Create placeholder structure
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);
    const safeKeyword = sanitizeFilename(keyword);
    
    // Create info file
    const infoPath = path.join(outputDir, `${safeKeyword}-info-${timestamp}.json`);
    const infoData = {
      keyword,
      maxPosts,
      sortBy,
      dateFolder: outputDir,
      createdAt: new Date().toISOString(),
      status: 'prepared',
      note: 'Use mcp__playwright__twitter_fetch_and_report to fetch actual data'
    };
    
    await fs.writeFile(infoPath, JSON.stringify(infoData, null, 2));
    console.log(`\n‚úÖ Info file created: ${path.basename(infoPath)}`);
    
    // Generate placeholder summary
    await generateSummary(outputDir, keyword, {
      totalPosts: 0,
      totalLikes: 0,
      totalRetweets: 0,
      totalImpressions: 0,
      avgEngagement: '0.00',
      topPosts: 'Awaiting data fetch...'
    });
    
    console.log('\n' + '=' .repeat(60));
    console.log('‚ú® Setup complete! Folder structure ready.');
    console.log('=' .repeat(60));
    
    return {
      success: true,
      outputDir,
      keyword,
      maxPosts,
      sortBy
    };
    
  } catch (error) {
    console.error('\n‚ùå Error:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * CLI Handler
 */
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0 || args[0] === '--help' || args[0] === '-h') {
    console.log(`
üê¶ Twitter Data Fetcher - Organized Report Generation

Usage:
  node fetch-twitter-data.js "<keyword>" [maxPosts] [sortBy]

Arguments:
  keyword   - Search term (required). Use OR for multiple terms.
  maxPosts  - Number of posts to fetch (default: ${CONFIG.defaultMaxPosts})
  sortBy    - Sort method: latest, top, or people (default: ${CONFIG.defaultSortBy})

Examples:
  node fetch-twitter-data.js "buildpad.io OR buildpad" 20 latest
  node fetch-twitter-data.js "#AI #MachineLearning" 50 top
  node fetch-twitter-data.js "@openai" 30 latest
  node fetch-twitter-data.js "crypto news" 100 top

Output Structure:
  report/twitter/DD-MMM-YYYY/
    ‚îú‚îÄ‚îÄ [keyword]-report-[timestamp].md
    ‚îú‚îÄ‚îÄ [keyword]-data-[timestamp].csv
    ‚îú‚îÄ‚îÄ [keyword]-data-[timestamp].json
    ‚îî‚îÄ‚îÄ extraction-summary.md

Note: This script prepares the folder structure. Use the MCP Playwright
      tool (mcp__playwright__twitter_fetch_and_report) to fetch actual data.
`);
    process.exit(0);
  }
  
  const keyword = args[0];
  const maxPosts = args[1] ? parseInt(args[1]) : CONFIG.defaultMaxPosts;
  const sortBy = args[2] || CONFIG.defaultSortBy;
  
  if (!['latest', 'top', 'people'].includes(sortBy)) {
    console.error(`‚ùå Invalid sortBy value: ${sortBy}`);
    console.error('   Must be one of: latest, top, people');
    process.exit(1);
  }
  
  const result = await fetchTwitterData(keyword, maxPosts, sortBy);
  
  if (result.success) {
    console.log('\n‚úÖ Success! Folder structure prepared.');
    console.log(`üìÅ Reports will be saved to: ${result.outputDir}`);
    process.exit(0);
  } else {
    console.error('\nüí• Failed:', result.error);
    process.exit(1);
  }
}

// Run if executed directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main().catch(error => {
    console.error('Fatal error:', error);
    process.exit(1);
  });
}

export { fetchTwitterData, getDateFolder, sanitizeFilename, generateSummary };